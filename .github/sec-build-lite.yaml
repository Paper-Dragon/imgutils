- Target: nmaguiar/imgutils:build-lite (alpine 3.19.1)
  Class: os-pkgs
  Type: alpine
- Target: usr/bin/crictl
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2024-32473
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v26.0.1%2Bincompatible
    InstalledVersion: v26.0.1+incompatible
    FixedVersion: 26.0.2
    Status: fixed
    Layer:
      Digest: sha256:27d361970e50add52925c20e7f8d7e3ae66a92e74279be127135875644cf6677
      DiffID: sha256:d0968874251ee1104146550a7b604b806d9179eccdb5093eb444a8eca4569ed9
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2024-32473
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'moby: IPv6 enabled on IPv4-only network interfaces'
    Description: Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. In 26.0.0, IPv6 is not disabled on network interfaces, including those belonging to networks where `--ipv6=false`. An container with an `ipvlan` or `macvlan` interface will normally be configured to share an external network link with the host machine. Because of this direct access, (1) Containers may be able to communicate with other hosts on the local network over link-local IPv6 addresses, (2) if router advertisements are being broadcast over the local network, containers may get SLAAC-assigned addresses, and (3) the interface  will be a member of IPv6 multicast groups. This means interfaces in IPv4-only networks present an unexpectedly and unnecessarily increased attack surface. The issue is patched in 26.0.2. To completely disable IPv6 in a container, use `--sysctl=net.ipv6.conf.all.disable_ipv6=1` in the `docker create` or `docker run` command. Or, in the service configuration of a `compose` file.
    Severity: MEDIUM
    CweIDs:
    - CWE-668
    VendorSeverity:
      ghsa: 2
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 4.7
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N
        V3Score: 4.7
    References:
    - https://access.redhat.com/security/cve/CVE-2024-32473
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/7cef0d9cd1cf221d8c0b7b7aeda69552649e0642
    - https://github.com/moby/moby/security/advisories/GHSA-x84c-p2g9-rqv9
    - https://nvd.nist.gov/vuln/detail/CVE-2024-32473
    - https://www.cve.org/CVERecord?id=CVE-2024-32473
    PublishedDate: '2024-04-18T22:15:10.4Z'
    LastModifiedDate: '2024-04-19T13:10:25.637Z'
  - VulnerabilityID: CVE-2023-47108
    PkgName: go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc
    PkgIdentifier:
      PURL: pkg:golang/go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc@v0.42.0
    InstalledVersion: v0.42.0
    FixedVersion: 0.46.0
    Status: fixed
    Layer:
      Digest: sha256:27d361970e50add52925c20e7f8d7e3ae66a92e74279be127135875644cf6677
      DiffID: sha256:d0968874251ee1104146550a7b604b806d9179eccdb5093eb444a8eca4569ed9
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2023-47108
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'opentelemetry-go-contrib: DoS vulnerability in otelgrpc due to unbound cardinality metrics'
    Description: OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`.
    Severity: HIGH
    CweIDs:
    - CWE-770
    VendorSeverity:
      amazon: 3
      cbl-mariner: 3
      ghsa: 3
      nvd: 3
      redhat: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      nvd:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2023-47108
    - https://github.com/open-telemetry/opentelemetry-go-contrib
    - https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327
    - https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138
    - https://github.com/open-telemetry/opentelemetry-go-contrib/commit/b44dfc9092b157625a5815cb437583cee663333b
    - https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322
    - https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-8pgv-569h-w5rw
    - https://nvd.nist.gov/vuln/detail/CVE-2023-47108
    - https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider
    - https://www.cve.org/CVERecord?id=CVE-2023-47108
    PublishedDate: '2023-11-10T19:15:16.41Z'
    LastModifiedDate: '2023-11-20T19:34:26.493Z'
